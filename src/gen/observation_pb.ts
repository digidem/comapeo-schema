// @generated by protoc-gen-es v0.2.1 with parameter "target=ts"
// @generated from file observation.proto (syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";

/**
 * @generated from message Value
 */
export class Value extends Message<Value> {
  /**
   * The kind of value.
   *
   * Represents a null value.
   *
   * @generated from oneof Value.kind
   */
  kind: {
    /**
     * Represents a double value.
     *
     * @generated from field: double number_value = 2;
     */
    value: number;
    case: "numberValue";
  } | {
    /**
     * Represents a string value.
     *
     * @generated from field: string string_value = 3;
     */
    value: string;
    case: "stringValue";
  } | {
    /**
     * Represents a boolean value.
     *
     * @generated from field: bool bool_value = 4;
     */
    value: boolean;
    case: "boolValue";
  } | {
    /**
     * Represents a structured value.
     *
     * Represents a repeated `Value`.
     *
     * @generated from field: Struct struct_value = 5;
     */
    value: Struct;
    case: "structValue";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Value>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "Value";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "number_value", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, oneof: "kind" },
    { no: 3, name: "string_value", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "kind" },
    { no: 4, name: "bool_value", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "kind" },
    { no: 5, name: "struct_value", kind: "message", T: Struct, oneof: "kind" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Value {
    return new Value().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Value {
    return new Value().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Value {
    return new Value().fromJsonString(jsonString, options);
  }

  static equals(a: Value | PlainMessage<Value> | undefined, b: Value | PlainMessage<Value> | undefined): boolean {
    return proto3.util.equals(Value, a, b);
  }
}

/**
 * @generated from message Struct
 */
export class Struct extends Message<Struct> {
  /**
   * Unordered map of dynamically typed values
   *
   * @generated from field: map<string, Value> fields = 1;
   */
  fields: { [key: string]: Value } = {};

  constructor(data?: PartialMessage<Struct>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "Struct";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fields", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Value} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Struct {
    return new Struct().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Struct {
    return new Struct().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Struct {
    return new Struct().fromJsonString(jsonString, options);
  }

  static equals(a: Struct | PlainMessage<Struct> | undefined, b: Struct | PlainMessage<Struct> | undefined): boolean {
    return proto3.util.equals(Struct, a, b);
  }
}

/**
 * @generated from message Observation
 */
export class Observation extends Message<Observation> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string version = 2;
   */
  version = "";

  /**
   * @generated from field: string created_at = 3;
   */
  createdAt = "";

  /**
   * @generated from field: optional string timestamp = 4;
   */
  timestamp?: string;

  /**
   * @generated from field: optional string userId = 5;
   */
  userId?: string;

  /**
   * @generated from field: optional string deviceId = 6;
   */
  deviceId?: string;

  /**
   * @generated from field: string type = 7;
   */
  type = "";

  /**
   * @generated from field: string links = 8;
   */
  links = "";

  /**
   * @generated from field: int32 schema_version = 9;
   */
  schemaVersion = 0;

  /**
   * @generated from field: optional float lat = 10;
   */
  lat?: number;

  /**
   * @generated from field: optional float lon = 11;
   */
  lon?: number;

  /**
   * @generated from field: repeated Struct refs = 12;
   */
  refs: Struct[] = [];

  /**
   * @generated from field: repeated Struct attachments = 13;
   */
  attachments: Struct[] = [];

  /**
   * @generated from field: optional Struct tags = 14;
   */
  tags?: Struct;

  constructor(data?: PartialMessage<Observation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "Observation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "timestamp", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "userId", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "deviceId", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "links", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "schema_version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "lat", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 11, name: "lon", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 12, name: "refs", kind: "message", T: Struct, repeated: true },
    { no: 13, name: "attachments", kind: "message", T: Struct, repeated: true },
    { no: 14, name: "tags", kind: "message", T: Struct, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Observation {
    return new Observation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Observation {
    return new Observation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Observation {
    return new Observation().fromJsonString(jsonString, options);
  }

  static equals(a: Observation | PlainMessage<Observation> | undefined, b: Observation | PlainMessage<Observation> | undefined): boolean {
    return proto3.util.equals(Observation, a, b);
  }
}

/**
 * @generated from message Observation.metadata
 */
export class Observation_metadata extends Message<Observation_metadata> {
  /**
   * @generated from field: optional bool manual_location = 3;
   */
  manualLocation?: boolean;

  constructor(data?: PartialMessage<Observation_metadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "Observation.metadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "manual_location", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Observation_metadata {
    return new Observation_metadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Observation_metadata {
    return new Observation_metadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Observation_metadata {
    return new Observation_metadata().fromJsonString(jsonString, options);
  }

  static equals(a: Observation_metadata | PlainMessage<Observation_metadata> | undefined, b: Observation_metadata | PlainMessage<Observation_metadata> | undefined): boolean {
    return proto3.util.equals(Observation_metadata, a, b);
  }
}

/**
 * @generated from message Observation.metadata.location
 */
export class Observation_metadata_location extends Message<Observation_metadata_location> {
  /**
   * @generated from field: optional float precision = 1;
   */
  precision?: number;

  /**
   * @generated from field: optional int32 altitude = 2;
   */
  altitude?: number;

  constructor(data?: PartialMessage<Observation_metadata_location>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "Observation.metadata.location";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "precision", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 2, name: "altitude", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Observation_metadata_location {
    return new Observation_metadata_location().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Observation_metadata_location {
    return new Observation_metadata_location().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Observation_metadata_location {
    return new Observation_metadata_location().fromJsonString(jsonString, options);
  }

  static equals(a: Observation_metadata_location | PlainMessage<Observation_metadata_location> | undefined, b: Observation_metadata_location | PlainMessage<Observation_metadata_location> | undefined): boolean {
    return proto3.util.equals(Observation_metadata_location, a, b);
  }
}

